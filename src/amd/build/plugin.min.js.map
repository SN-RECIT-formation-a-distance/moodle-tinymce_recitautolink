{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n *\r\n * @module      tiny_recitautolink/plugin\r\n * @copyright  2019 RECIT\r\n * @license    {@link http://www.gnu.org/licenses/gpl-3.0.html} GNU GPL v3 or later\r\n */\r\n\r\nimport {getTinyMCE} from 'editor_tiny/loader';\r\nimport {getPluginMetadata} from 'editor_tiny/utils';\r\nimport {getButtonImage} from 'editor_tiny/utils';\r\nimport {get_string as getString} from 'core/str';\r\nimport {component, pluginName, buttonName} from './common';\r\nimport {Editor} from './wrapper';\r\nimport * as Configuration from './configuration';\r\nimport * as Options from './options';\r\n\r\n// eslint-disable-next-line no-async-promise-executor\r\nexport default new Promise(async(resolve) => {\r\n    const bseditor = new Editor();\r\n    const [\r\n        tinyMCE,\r\n        pluginMetadata,\r\n    ] = await Promise.all([\r\n        getTinyMCE(),\r\n        getPluginMetadata(component, pluginName),\r\n    ]);\r\n    const [\r\n        ButtonTitle,\r\n        btn,\r\n    ] = await Promise.all([\r\n        getString('pluginname', component),\r\n        getButtonImage('autolink', component),\r\n    ]);\r\n\r\n    tinyMCE.PluginManager.add(`${component}/plugin`, (editor) => {\r\n        Options.register(editor);\r\n\r\n        const icon = 'autolink';\r\n        editor.ui.registry.addIcon(icon, btn.html);\r\n\r\n        editor.ui.registry.addButton(buttonName, {\r\n            icon,\r\n            tooltip: ButtonTitle,\r\n            onAction: () => bseditor.open(editor),\r\n        });\r\n\r\n        // This allows it to be added to a standard menu, or a context menu.\r\n        editor.ui.registry.addMenuItem(buttonName, {\r\n            icon,\r\n            text: ButtonTitle,\r\n            onAction: () => bseditor.open(editor),\r\n        });\r\n        return pluginMetadata;\r\n    });\r\n\r\n    // Resolve the Media Plugin and include configuration.\r\n    resolve([`${component}/plugin`, Configuration]);\r\n});\r\n"],"names":["Promise","async","bseditor","Editor","tinyMCE","pluginMetadata","all","component","pluginName","ButtonTitle","btn","PluginManager","add","editor","Options","register","icon","ui","registry","addIcon","html","addButton","buttonName","tooltip","onAction","open","addMenuItem","text","resolve","Configuration"],"mappings":";;;;;;gMAgCe,IAAIA,SAAQC,MAAAA,gBACjBC,SAAW,IAAIC,iBAEjBC,QACAC,sBACML,QAAQM,IAAI,EAClB,yBACA,4BAAkBC,kBAAWC,uBAG7BC,YACAC,WACMV,QAAQM,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,WAAYA,qBAG/BH,QAAQO,cAAcC,cAAOL,8BAAqBM,SAC9CC,QAAQC,SAASF,cAEXG,KAAO,kBACbH,OAAOI,GAAGC,SAASC,QAAQH,KAAMN,IAAIU,MAErCP,OAAOI,GAAGC,SAASG,UAAUC,mBAAY,CACrCN,KAAAA,KACAO,QAASd,YACTe,SAAU,IAAMtB,SAASuB,KAAKZ,UAIlCA,OAAOI,GAAGC,SAASQ,YAAYJ,mBAAY,CACvCN,KAAAA,KACAW,KAAMlB,YACNe,SAAU,IAAMtB,SAASuB,KAAKZ,UAE3BR,kBAIXuB,QAAQ,WAAIrB,6BAAoBsB"}